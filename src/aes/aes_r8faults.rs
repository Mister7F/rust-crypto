use crate::aes::aes_ni;
use itertools::iproduct;
use pyo3::prelude::*;
use rayon::prelude::*;
use std::arch::x86_64::*;

#[pyfunction]
pub fn aes_r8faults_filter(
    col_candidates: [Vec<[u8; 4]>; 4],
    ciphertext: [u8; 16],
    ciphertext_error: [u8; 16],
    fault_values: Vec<u8>,
    error_pos: usize,
) -> Vec<[u8; 16]> {
    let col = error_pos / 4;
    // mask to do early detection, ignore "faults" argument, just check every
    // other bytes are null but it allow us to speed up a lot the bruteforce (we
    // don't even need to convert the m128 register) if error_pos == 4:
    // 0b1111111100001111
    let fault_mask = 0b1111111111111111 ^ (0b1111 << (col * 4));
    let ciphertext_error = aes_ni::load(ciphertext_error);

    let _ = rayon::ThreadPoolBuilder::new()
        .num_threads(8)
        .build_global();

    let result = col_candidates[0].par_iter().flat_map(|k0| {
        iproduct!(&col_candidates[1], &col_candidates[2], &col_candidates[3])
            .filter_map(|(k1, k2, k3)| {
                let key_10 = _make_key(k0, k1, k2, k3);

                let r = _r8faults_partial_decrypt(ciphertext, ciphertext_error, key_10, fault_mask);

                let Some(diff) = r else {
                    return None;
                };
                // check that the error in round 8 is valid
                // (everything null except our error at given index)
                if !diff.iter().enumerate().all(|(i, val)| {
                    if i == error_pos {
                        return fault_values.contains(val);
                    }
                    *val == 0
                }) {
                    return None;
                }
                Some(key_10)
            })
            .collect::<Vec<[u8; 16]>>()
    });

    result.collect()
}

/**
 * Decrypt two rounds of both ciphertext and if the difference match the mask, return it.
 */
fn _r8faults_partial_decrypt(
    ciphertext: [u8; 16],
    ciphertext_error: __m128i,
    key_10: [u8; 16],
    fault_mask: i32,
) -> Option<[u8; 16]> {
    let mut m = aes_ni::load(ciphertext);
    let mut m_ = ciphertext_error;
    let k10 = aes_ni::load(key_10);

    // compute the needed keys
    let k9 = aes_ni::single_step_key_inversion::<0x36>(k10);
    let k9imc = aes_ni::inv_mix_column_si128(k9);
    let k8 = aes_ni::single_step_key_inversion::<0x1b>(k9);
    let k8imc = aes_ni::inv_mix_column_si128(k8);

    // decrypt 3 last rounds
    m = aes_ni::xor_si128(m, k10);
    m = aes_ni::dec_si128(m, k9imc);
    m = aes_ni::dec_si128(m, k8imc);

    m_ = aes_ni::xor_si128(m_, k10);
    m_ = aes_ni::dec_si128(m_, k9imc);
    m_ = aes_ni::dec_si128(m_, k8imc);

    let diff = aes_ni::xor_si128(m, m_);

    // E.G. if error_pos == 4
    // 0b1111111100001111
    let mask = unsafe { _mm_movemask_epi8(_mm_cmpeq_epi32(diff, _mm_setzero_si128())) };

    if mask != fault_mask {
        None
    } else {
        Some(aes_ni::unload(diff))
    }
}

fn _make_key(k0: &[u8; 4], k1: &[u8; 4], k2: &[u8; 4], k3: &[u8; 4]) -> [u8; 16] {
    let ind = [[0, 13, 10, 7], [4, 1, 14, 11], [8, 5, 2, 15], [12, 9, 6, 3]];

    let mut key = [0; 16];
    key[ind[0][0]] = k0[0];
    key[ind[0][1]] = k0[1];
    key[ind[0][2]] = k0[2];
    key[ind[0][3]] = k0[3];
    key[ind[1][0]] = k1[0];
    key[ind[1][1]] = k1[1];
    key[ind[1][2]] = k1[2];
    key[ind[1][3]] = k1[3];
    key[ind[2][0]] = k2[0];
    key[ind[2][1]] = k2[1];
    key[ind[2][2]] = k2[2];
    key[ind[2][3]] = k2[3];
    key[ind[3][0]] = k3[0];
    key[ind[3][1]] = k3[1];
    key[ind[3][2]] = k3[2];
    key[ind[3][3]] = k3[3];
    key
}

// --------------------------------------------------
//                      TESTS
// --------------------------------------------------

#[cfg(test)]
mod tests {
    use crate::aes::aes_r8faults::aes_r8faults_filter;

    #[test]
    fn test_aes_r8faults_filter() {
        let key_10 = [
            154, 149, 51, 94, 215, 149, 196, 3, 159, 59, 89, 40, 29, 84, 194, 203,
        ];
        let enc = [
            248, 104, 227, 10, 13, 134, 194, 139, 224, 216, 126, 90, 47, 193, 48, 112,
        ];
        let enc_ = [
            34, 35, 153, 178, 68, 153, 125, 192, 157, 243, 155, 204, 59, 83, 12, 221,
        ];
        let col_candidates = [
            vec![
                [244, 186, 157, 170],
                [46, 40, 157, 170],
                [168, 6, 224, 238],
                [131, 194, 175, 69],
                [237, 44, 142, 236],
                [236, 72, 202, 76],
                [199, 30, 96, 172],
                [54, 218, 202, 7],
                [54, 72, 47, 7],
                [154, 198, 188, 72],
                [89, 80, 175, 14],
                [168, 148, 29, 238],
                [168, 148, 5, 238],
                [154, 84, 89, 3],
                [55, 44, 142, 167],
                [223, 126, 55, 1],
                [169, 98, 164, 78],
                [115, 240, 164, 78],
                [54, 218, 47, 7],
                [177, 2, 243, 227],
                [130, 52, 235, 229],
                [5, 126, 55, 74],
                [5, 236, 210, 1],
                [130, 166, 14, 174],
                [169, 240, 65, 5],
                [28, 122, 193, 71],
                [107, 2, 243, 168],
                [168, 6, 5, 165],
                [176, 244, 183, 67],
                [89, 194, 74, 14],
                [198, 232, 193, 12],
                [64, 84, 89, 3],
                [199, 140, 96, 172],
                [114, 148, 29, 238],
                [114, 148, 5, 238],
                [107, 144, 243, 227],
                [222, 136, 150, 234],
                [115, 98, 164, 5],
                [4, 136, 150, 234],
                [64, 198, 188, 72],
                [28, 122, 36, 71],
                [222, 26, 115, 234],
                [106, 244, 183, 8],
                [176, 244, 82, 8],
                [28, 232, 36, 71],
                [5, 236, 55, 74],
                [169, 98, 65, 78],
                [237, 190, 142, 167],
                [106, 102, 183, 67],
                [55, 44, 107, 167],
                [114, 148, 224, 165],
                [114, 6, 5, 165],
                [115, 240, 65, 78],
                [199, 30, 133, 172],
                [106, 102, 82, 8],
                [245, 222, 217, 65],
                [114, 148, 248, 238],
                [4, 26, 150, 161],
                [176, 102, 183, 67],
                [131, 80, 175, 69],
                [106, 244, 82, 67],
                [88, 52, 235, 229],
                [115, 98, 65, 5],
                [64, 198, 89, 72],
                [168, 6, 29, 238],
                [114, 6, 224, 238],
                [176, 102, 82, 8],
                [47, 76, 217, 65],
                [88, 166, 235, 229],
                [177, 2, 22, 227],
                [131, 194, 74, 14],
                [244, 186, 120, 225],
            ],
            vec![
                [81, 243, 232, 208],
                [47, 177, 66, 211],
                [179, 135, 173, 28],
                [2, 232, 45, 231],
                [53, 225, 135, 228],
                [232, 109, 121, 193],
                [140, 127, 22, 245],
                [124, 225, 135, 114],
                [197, 127, 42, 99],
                [81, 184, 232, 70],
                [24, 243, 212, 70],
                [197, 127, 42, 245],
                [47, 177, 66, 69],
                [197, 52, 42, 99],
                [179, 135, 83, 138],
                [61, 16, 170, 14],
                [215, 149, 254, 190],
                [187, 61, 128, 246],
                [2, 163, 17, 113],
                [24, 184, 232, 208],
                [53, 225, 187, 114],
                [75, 163, 45, 231],
                [140, 127, 42, 99],
                [232, 109, 121, 87],
                [124, 225, 135, 228],
                [224, 156, 104, 43],
                [161, 38, 69, 193],
                [116, 91, 170, 14],
                [140, 127, 42, 245],
                [75, 232, 45, 231],
                [132, 197, 7, 31],
                [81, 243, 212, 70],
                [215, 149, 194, 40],
                [158, 222, 254, 40],
                [161, 38, 121, 87],
                [89, 73, 249, 58],
                [81, 184, 212, 208],
                [150, 47, 239, 194],
                [150, 47, 239, 84],
                [161, 109, 121, 193],
                [61, 91, 170, 14],
                [215, 222, 254, 40],
                [2, 232, 17, 113],
                [53, 170, 187, 114],
                [53, 225, 187, 228],
                [223, 47, 239, 194],
                [197, 52, 22, 99],
                [223, 47, 239, 84],
                [205, 197, 7, 137],
                [124, 225, 187, 114],
                [47, 177, 126, 211],
                [223, 100, 239, 194],
                [250, 135, 173, 138],
                [132, 142, 7, 31],
                [250, 135, 173, 28],
                [205, 197, 59, 31],
            ],
            vec![
                [39, 1, 201, 2],
                [16, 201, 156, 113],
                [218, 16, 147, 125],
                [113, 185, 85, 4],
                [201, 45, 213, 205],
                [213, 93, 28, 184],
                [159, 149, 73, 203],
                [73, 35, 245, 31],
                [52, 35, 245, 178],
                [126, 244, 218, 193],
                [180, 45, 213, 96],
                [167, 16, 147, 125],
                [73, 35, 143, 178],
                [59, 110, 0, 119],
                [90, 30, 201, 2],
                [109, 201, 230, 113],
                [241, 183, 15, 123],
                [159, 149, 51, 203],
                [113, 185, 47, 4],
                [218, 15, 233, 208],
                [52, 60, 143, 178],
                [59, 113, 122, 218],
                [201, 45, 175, 205],
                [237, 199, 198, 163],
                [168, 66, 28, 184],
                [226, 138, 51, 203],
                [159, 149, 51, 102],
                [144, 216, 198, 163],
                [187, 96, 32, 165],
                [187, 96, 90, 8],
                [126, 235, 160, 193],
                [39, 1, 179, 175],
            ],
            vec![
                [29, 59, 196, 94],
                [101, 152, 159, 146],
                [42, 163, 7, 46],
                [202, 102, 120, 36],
                [76, 221, 58, 175],
                [82, 43, 92, 226],
                [111, 8, 221, 25],
                [192, 221, 58, 175],
                [113, 179, 32, 42],
                [113, 179, 159, 146],
                [227, 69, 249, 103],
                [233, 213, 4, 236],
                [143, 230, 29, 19],
                [145, 118, 95, 32],
                [233, 213, 187, 236],
                [88, 221, 133, 23],
                [29, 59, 123, 230],
                [62, 163, 184, 46],
                [145, 118, 224, 152],
                [9, 16, 196, 94],
                [70, 0, 92, 226],
                [70, 43, 227, 226],
            ],
        ];

        let fault_values = vec![113, 114, 115, 116, 117, 118, 119, 120];
        let error_pos = (160 - 16 - 32 + 1) % 16;
        let result = aes_r8faults_filter(col_candidates, enc, enc_, fault_values, error_pos);

        assert!(result.contains(&key_10));
        assert_eq!(result.len(), 1);
    }
}
